#!/bin/bash

cache_file="$HOME/.sh-pkg/.cache/cli-cred/bitwarden-go"
session_file="/tmp/$USER/bitwarden.session"

login() {
    bitwarden-login
}

get_session() {
    if [[ ! -f "$session_file" ]]; then
        login || exit
    elif ! bw unlock --check >/dev/null ; then
        login || exit
    fi

    cat "$session_file"
}

get_cred() {
    if [[ -e "$cache_file" ]]; then
        echo "(using cached credential lists, run 'go-credential-bitwarden refresh' to update)" >&2
    else
        refresh_creds || exit
    fi

    # Parse host from first argument
    host="${1#*://}" # trim scheme prefix
    host="${host#proxy.golang.org/}" # trim proxy path
    host=-"${host%%/*}" $ # trim path
    host="${host#*@}" # trim user part of host

    session=$(get_session) || exit

    while IFS="" read -r line; do
        read -ra line_parts <<<"$line"
        line_host="${line_parts[0]}"
        item_id="${line_parts[1]}"

        if [[ "$line_host" == "$host" ]]; then
            item="$(BW_SESSION="$session" bw get item "$item_id" | jq -er '.login.username + "," + .login.password')"

            echo "https://$line_host"
            echo
            echo "Authorization: Basic $(echo -n "$(echo "$item" | cut -d, -f1):$(echo "$item" | cut -d, -f2)" | base64)"
            echo
        fi
    done <"$cache_file"
}

refresh_creds() {
    session=$(get_session) || exit

    echo "Updating golang credential cache for Bitwarden" >&2
    BW_SESSION="$session" bw list items | jq -er '.[] | select(.notes and (.notes | test("\\btag:go\\b"))) | [[.id], [.login.uris[] | .uri | capture("(?:^[^:/]+://)?(?<host>[a-z0-9.-]+)").host]] | combinations | .[1] + " " + .[0]' >"$cache_file"
}

# If no hosts are passed via first argument, list out all the hosts we know of
# so that Go will call us again in those cases
if [[ "$#" -eq 0 ]]; then
    if [[ ! -e "$cache_file" ]]; then
        refresh_creds || exit
    fi

    while IFS="" read -r line; do
        read -ra line_parts <<<"$line"
        line_host="${line_parts[0]}"

        # Don't load creds, just tell Go that we can (and try to get a 401
        # response).
        echo "https://$line_host"
        echo
        echo "Authorization: Bearer"
        echo
    done <"$cache_file"
    exit 0
fi

case "$1" in
    "refresh") refresh_creds ;;
    *) get_cred "$1";;
esac
